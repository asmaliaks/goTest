// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: frost-taxonomy.proto

package app_taxonomy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Taxonomy_Put_FullMethodName = "/taxonomy.Taxonomy/put"
	Taxonomy_Get_FullMethodName = "/taxonomy.Taxonomy/get"
)

// TaxonomyClient is the client API for Taxonomy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxonomyClient interface {
	Put(ctx context.Context, in *TaxonomyItem, opts ...grpc.CallOption) (*TaxonomyPutResponse, error)
	Get(ctx context.Context, in *TaxonomyGetRequest, opts ...grpc.CallOption) (*TaxonomyItem, error)
}

type taxonomyClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxonomyClient(cc grpc.ClientConnInterface) TaxonomyClient {
	return &taxonomyClient{cc}
}

func (c *taxonomyClient) Put(ctx context.Context, in *TaxonomyItem, opts ...grpc.CallOption) (*TaxonomyPutResponse, error) {
	out := new(TaxonomyPutResponse)
	err := c.cc.Invoke(ctx, Taxonomy_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxonomyClient) Get(ctx context.Context, in *TaxonomyGetRequest, opts ...grpc.CallOption) (*TaxonomyItem, error) {
	out := new(TaxonomyItem)
	err := c.cc.Invoke(ctx, Taxonomy_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxonomyServer is the server API for Taxonomy service.
// All implementations must embed UnimplementedTaxonomyServer
// for forward compatibility
type TaxonomyServer interface {
	Put(context.Context, *TaxonomyItem) (*TaxonomyPutResponse, error)
	Get(context.Context, *TaxonomyGetRequest) (*TaxonomyItem, error)
	mustEmbedUnimplementedTaxonomyServer()
}

// UnimplementedTaxonomyServer must be embedded to have forward compatible implementations.
type UnimplementedTaxonomyServer struct {
}

func (UnimplementedTaxonomyServer) Put(context.Context, *TaxonomyItem) (*TaxonomyPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedTaxonomyServer) Get(context.Context, *TaxonomyGetRequest) (*TaxonomyItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTaxonomyServer) mustEmbedUnimplementedTaxonomyServer() {}

// UnsafeTaxonomyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxonomyServer will
// result in compilation errors.
type UnsafeTaxonomyServer interface {
	mustEmbedUnimplementedTaxonomyServer()
}

func RegisterTaxonomyServer(s grpc.ServiceRegistrar, srv TaxonomyServer) {
	s.RegisterService(&Taxonomy_ServiceDesc, srv)
}

func _Taxonomy_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxonomyItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taxonomy_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServer).Put(ctx, req.(*TaxonomyItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taxonomy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxonomyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxonomyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taxonomy_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxonomyServer).Get(ctx, req.(*TaxonomyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Taxonomy_ServiceDesc is the grpc.ServiceDesc for Taxonomy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taxonomy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taxonomy.Taxonomy",
	HandlerType: (*TaxonomyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "put",
			Handler:    _Taxonomy_Put_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Taxonomy_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frost-taxonomy.proto",
}
